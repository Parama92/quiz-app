{"version":3,"sources":["Components/Question.js","Components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Question","className","id","this","props","index","question","type","name","value","htmlFor","option1","option2","option3","option4","React","Component","Quiz","state","error","quiz","isLoaded","isComplete","overlay","score","handleSubmit","event","setState","preventDefault","answers","map","answer","target","fetch","method","headers","body","JSON","stringify","then","res","json","data","href","onSubmit","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAgDeA,E,iLA5CP,OACI,yBAAKC,UAAU,qBAAqBC,GAAI,IAAMC,KAAKC,MAAMC,OACrD,yBAAKJ,UAAU,YAAYE,KAAKC,MAAME,UACtC,2BACIC,KAAK,QACLC,KAAM,OAASL,KAAKC,MAAMF,GAC1BO,MAAM,UACNP,GAAIC,KAAKC,MAAMF,GAAK,OAExB,2BAAOQ,QAASP,KAAKC,MAAMF,GAAK,MAC5B,yBAAKD,UAAU,UAAUE,KAAKC,MAAMO,UAExC,2BACIJ,KAAK,QACLC,KAAM,OAASL,KAAKC,MAAMF,GAC1BO,MAAM,UACNP,GAAIC,KAAKC,MAAMF,GAAK,OAExB,2BAAOQ,QAASP,KAAKC,MAAMF,GAAK,MAC5B,yBAAKD,UAAU,UAAUE,KAAKC,MAAMQ,UAExC,2BACIL,KAAK,QACLC,KAAM,OAASL,KAAKC,MAAMF,GAC1BO,MAAM,UACNP,GAAIC,KAAKC,MAAMF,GAAK,OAExB,2BAAOQ,QAASP,KAAKC,MAAMF,GAAK,MAC5B,yBAAKD,UAAU,UAAUE,KAAKC,MAAMS,UAExC,2BACIN,KAAK,QACLC,KAAM,OAASL,KAAKC,MAAMF,GAC1BO,MAAM,UACNP,GAAIC,KAAKC,MAAMF,GAAK,OAExB,2BAAOQ,QAASP,KAAKC,MAAMF,GAAK,MAC5B,yBAAKD,UAAU,UAAUE,KAAKC,MAAMU,e,GAvCjCC,IAAMC,WCoFdC,G,iNAhFXC,MAAQ,CACJC,MAAO,KACPC,KAAM,GACNC,UAAU,EACVC,YAAY,EACZC,QAAS,UACTC,OAAQ,G,EAaZC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVJ,QAAS,YAEbG,EAAME,iBACN,IAAMC,EAAU,EAAKX,MAAME,KAAKU,IAAI,SAAAxB,GAChC,IAAMyB,EAASL,EAAMM,OAAO,OAAS1B,EAASJ,IAAIO,MAClD,MAAO,CACHP,GAAII,EAASJ,GACb6B,YAGRE,MAAM,gDAAiD,CACnDC,OAAQ,OACRC,QAAS,CACL,OAAU,oBAEdC,KAAMC,KAAKC,UAAUT,KAEpBU,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAf,GACF,EAAKG,SAAS,CACVJ,QAAS,OACTD,YAAY,EACZE,a,mFAnCK,IAAD,OAChBS,MAAM,8CACDM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACF,EAAKf,SAAS,CACVP,KAAMsB,EACNrB,UAAU,EACVE,QAAS,a,+BAiCrB,OACI,yBAAKrB,GAAG,QACJ,yBAAKD,UAAU,WACX,2CAEI,uBAAG0C,KAAK,OAAM,uBAAG1C,UAAU,gCAInC,yBAAKA,UAAWE,KAAKe,MAAMK,SACvB,yBAAKtB,UAAU,WACX,uBAAGA,UAAU,uBACb,uBAAGA,UAAU,gBACb,uBAAGA,UAAU,yBAGrB,0BAAM2C,SAAUzC,KAAKsB,cAEbtB,KAAKe,MAAME,KAAKU,IAAI,SAACxB,EAAUD,GAAX,OAAqB,kBAAC,EAAD,eAAUwC,IAAKvC,EAASJ,IAAQI,EAAhC,CAA0CD,MAAOA,EAAQ,OAEtG,2BAAOE,KAAK,SAASE,MAAM,iBAE/B,yBAAKR,UAAU,WACVE,KAAKe,MAAMI,YACR,yBAAKpB,GAAG,UAAR,mBAAkCC,KAAKe,MAAMM,MAA7C,W,GAzELT,IAAMC,YCMV8B,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCMc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC,gB","file":"static/js/main.06bd35e1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Question extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='question-container' id={'q' + this.props.index}>\r\n                <div className='question'>{this.props.question}</div>\r\n                <input\r\n                    type='radio'\r\n                    name={\"ques\" + this.props.id}\r\n                    value=\"option1\"\r\n                    id={this.props.id + 'o1'}\r\n                />\r\n                <label htmlFor={this.props.id + 'o1'}>\r\n                    <div className='option'>{this.props.option1}</div>\r\n                </label>\r\n                <input\r\n                    type='radio'\r\n                    name={\"ques\" + this.props.id}\r\n                    value=\"option2\"\r\n                    id={this.props.id + 'o2'}\r\n                />\r\n                <label htmlFor={this.props.id + 'o2'}>\r\n                    <div className='option'>{this.props.option2}</div>\r\n                </label>\r\n                <input\r\n                    type='radio'\r\n                    name={\"ques\" + this.props.id}\r\n                    value=\"option3\"\r\n                    id={this.props.id + 'o3'}\r\n                />\r\n                <label htmlFor={this.props.id + 'o3'}>\r\n                    <div className='option'>{this.props.option3}</div>\r\n                </label>\r\n                <input\r\n                    type='radio'\r\n                    name={\"ques\" + this.props.id}\r\n                    value=\"option4\"\r\n                    id={this.props.id + 'o4'}\r\n                />\r\n                <label htmlFor={this.props.id + 'o4'}>\r\n                    <div className='option'>{this.props.option4}</div>\r\n                </label>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from \"react\";\r\n\r\nimport Question from './Question';\r\nimport '../quiz.css';\r\n\r\nclass Quiz extends React.Component {\r\n    state = {\r\n        error: null,\r\n        quiz: [],\r\n        isLoaded: false,\r\n        isComplete: false,\r\n        overlay: \"overlay\",\r\n        score: -1\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"https://got-quiz-api.herokuapp.com/getQuiz\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    quiz: data,\r\n                    isLoaded: true,\r\n                    overlay: \"hide\"\r\n                })\r\n            })\r\n    }\r\n    handleSubmit = (event) => {\r\n        this.setState({\r\n            overlay: \"overlay\"\r\n        })\r\n        event.preventDefault();\r\n        const answers = this.state.quiz.map(question => {\r\n            const answer = event.target[\"ques\" + question.id].value;\r\n            return {\r\n                id: question.id,\r\n                answer\r\n            }\r\n        })\r\n        fetch('https://got-quiz-api.herokuapp.com/submitQuiz', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify(answers)\r\n        })\r\n            .then(res => res.json())\r\n            .then(score => {\r\n                this.setState({\r\n                    overlay: \"hide\",\r\n                    isComplete: true,\r\n                    score\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n            <div id='quiz'>\r\n                <div className='heading'>\r\n                    <h1>\r\n                        Quiz&nbsp;&nbsp;\r\n                        <a href='#q1'><i className=\"fas fa-angle-double-down\"></i>\r\n                        </a>\r\n                    </h1>\r\n                </div>\r\n                <div className={this.state.overlay}>\r\n                    <div className='loading'>\r\n                        <i className=\"fas fa-question q1\"></i>\r\n                        <i className=\"fas fa-male\"></i>\r\n                        <i className=\"fas fa-question q2\"></i>\r\n                    </div>\r\n                </div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {\r\n                        this.state.quiz.map((question, index) => <Question key={question.id} {...question} index={index + 1} />)\r\n                    }\r\n                    <input type=\"submit\" value='Submit Quiz' />\r\n                </form>\r\n                <div className='results'>\r\n                    {this.state.isComplete &&\r\n                        <div id='scores'>Your score is : {this.state.score}!</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\nimport Quiz from \"./Components/Quiz\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}